import tensorflow as tf
import tf.keras as keras
from tensorflow.keras import layers

from base import GAN
"""
TF 2.0 Implementation of DCGAN to use for baseline testing of PSIG-GAN
Implements the abstract GAN class specified in base.py

"""

class DCGAN(GAN):


    def __init__(self,latent_shape, output_image_shape, num_gen_images):

        """
        Creates a DCGAN with Keras-based models for both Discriminator and Generator 
        Includes loss computation for both models and training functionality

        Constructor args:
            @param latent_shape: tuple of ints identifying the shape of the seed fed to the generator [num_imgs, seed_dim]
            @param output_image_shape: tuple of ints specifying the generator's output shape. Should be 512x512x3 for RGB based images
            @param num_gen_images: int specifying the batch size of images to be generated

        """

        self.latent_shape = latent_shape
        self.output_shape = [num_gen_images, output_image_shape]

        # Instantiate generator models
        self.generator = self._build_generator()
        self.discriminator = self._build_discriminator()

    
    def _build_discriminator(self): 

        '''
        Builds a discriminator network (binary classification using DCNN)
        Takes in an image, and predicts whether the image is fake or real
        Implemented using Tensorflow 2.0

        Architecture:
            - Convolution layers : 
            - Pooling layers :
            - Batch Norm :
            - Dense : 
            - Activations: 

        The input image size will be the same as the output image size that is generated by the generator,
        hence: discrim_input_shape = self.output_image_shape
        '''

        model = tf.keras.Sequential()
        model.add(layers.Conv2D(64, (5, 5), strides=(2, 2), padding='same', discrim_input_shape = self.output_shape))
        model.add(layers.LeakyReLU())
        model.add(layers.Dropout(0.3))

        model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))
        model.add(layers.LeakyReLU())
        model.add(layers.Dropout(0.3))

        model.add(layers.Flatten())
        model.add(layers.Dense(1))

        model = keras.Sequential()
         return model

    def _build_generator(self):
        ''' 
        Builds a generator model that generates an image based on a random latent vector
        Upsamples the latent vector using transposed convolutions and reshaping
        Implemented with Tensorflow 2.0

        Architecture:
        - Convolution layers : 
        - Pooling layers :
        - Batch Norm :
        - Dense : 
        - Activations: 


        '''
        model = keras.Sequential()
        model.add(layers.Dense(self.output_shape, use_bias=False, gen_input_shape =(self.latent_shape,)))
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())
        
        model.add(layers.Reshape(self.output_shape))
        assert model.output_shape == (num_gen_images, self.output_shape) # Note: num_gen_images is the batch size
        
        model.add(layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False))
        assert model.output_shape == (num_gen_images, self.output_shape)
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())
        
        model.add(layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False))
        model.add(layers.BatchNormalization())
        model.add(layers.LeakyReLU())
        
        model.add(layers.Conv2DTranspose(1, (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))

        return model

    @tf.function
    def train_step(self, num_epochs, fake_data_batch, real_data_batch):

        """
        Implements the training routine for the DCGAN framework 
        Implemented using Tensorflow 2.0

        @param num_epochs: number of epochs for training
        @param fake_data_batch: 4D tensor containing fake images - [batch_size, img_len, img_wid, num_channels]
        @param real_data_batch: 4D tensor containing real images sampled from GrassWeeds repo - [batch_size, img_len, img_wid, num_channels]
        
        """
        noise = tf.random.normal([BATCH_SIZE, noise_dim])
        
            with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
            generated_images = generator(noise, training=True)

        real_output = discriminator(images, training=True)
        fake_output = discriminator(generated_images, training=True)

        gen_loss = generator_loss(fake_output)
        disc_loss = discriminator_loss(real_output, fake_output)
        
        gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)
        gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)
        
        generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))
        discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))

    def train(dataset, epochs):
        for epoch in range(epochs):
        start = time.time()

        for image_batch in dataset:
        train_step(image_batch)

        # Produce images for the GIF as we go
        display.clear_output(wait=True)
        generate_and_save_images(generator,epoch + 1,seed)

        # Save the model every 15 epochs
        if (epoch + 1) % 15 == 0:
        checkpoint.save(file_prefix = checkpoint_prefix)

        print ('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))

        # Generate after the final epoch
        display.clear_output(wait=True)
        generate_and_save_images(generator,epochs,seed)

        #Generate and save images

    def generate_and_save_images(model, epoch, test_input):
    # Notice `training` is set to False.
    # This is so all layers run in inference mode (batchnorm).
    predictions = model(test_input, training=False)

    fig = plt.figure(figsize=(4,4))

    for i in range(predictions.shape[0]):
      plt.subplot(4, 4, i+1)
      plt.imshow(predictions[i, :, :, 0] * 127.5 + 127.5, cmap='gray')
      plt.axis('off')

    plt.savefig('image_at_epoch_{:04d}.png'.format(epoch))
    plt.show()
